import numpy as np
from math import *
from collections import OrderedDict
import os

DEBUT(PAR_LOT="NON")

### >>>>>>>>>>>>>>>>>>>>>>>
### Build MFront librairies
### <<<<<<<<<<<<<<<<<<<<<<<

# CREA_LIB_MFRONT(...)

### >>>>
### Data
### <<<<

ygal=-490.  # Depth of the center of the gallery

### >>>>
### Mesh
### <<<<

MAIL=LIRE_MAILLAGE(UNITE=20,
                   FORMAT="MED")

### Convert to quadratic mesh
MAILLAGE=CREA_MAILLAGE(MAILLAGE=MAIL,
                       LINE_QUAD=_F(TOUT='OUI',),)

### Define some groups
MAILLAGE=DEFI_GROUP(reuse=MAILLAGE,
                    MAILLAGE=MAILLAGE,
                    CREA_GROUP_NO=(_F(TOUT_GROUP_MA="OUI",),),)

### Re-define the orientation of some boundary cells
MAILLAGE=MODI_MAILLAGE(reuse=MAILLAGE,
                       MAILLAGE=MAILLAGE,
                       ORIE_PEAU_2D=(_F(GROUP_MA=("GrEdgeLeftExc","GrEdgeRight","GrEdgeTop","GrEdgeBottom",),),
                                     _F(GROUP_MA=("GrEdgeGal"),
                                        GROUP_MA_SURF=("GrFaceEdz"),),),)

### >>>>>
### Model
### <<<<<

MODL=AFFE_MODELE(MAILLAGE=MAILLAGE,
                 AFFE=(_F(GROUP_MA=("GrFaceCOx","GrFaceEdz","GrEdgeGal","GrEdgeTop","GrEdgeRight"),
                          PHENOMENE="MECANIQUE",
                           MODELISATION="D_PLAN"),),)

### >>>>>>>>>>>>>>>>
### >>> Material <<<
### <<<<<<<<<<<<<<<<

# COX=DEFI_MATERIAU(...)

### >>>>>>>>>>>>>>>>>>>>
### Assign the materials
### <<<<<<<<<<<<<<<<<<<<

AFARG=AFFE_MATERIAU(MAILLAGE=MAILLAGE,
                    AFFE=(_F(GROUP_MA=("GrFaceCOx","GrFaceEdz"),
                             MATER=COX,),),)

### >>>>>>>>>>>>>>>>>>
### Initial conditions
### <<<<<<<<<<<<<<<<<<

### In situ stress state at -490m
sixx=16.1e6
siyy=12.4e6
sizz=12.7e6

### Initial displacement field
DEPL_INI=CREA_CHAMP(TYPE_CHAM="NOEU_DEPL_R",
                    OPERATION="AFFE",
                    MAILLAGE=MAILLAGE,
                    AFFE=(_F(GROUP_MA=("GrFaceCOx","GrFaceEdz"),
                             NOM_CMP=("DX","DY"),
                             VALE=(0., 0.),),),)

### Initial stress state
FSIYY_TT=FORMULE(VALE='rho*gravi*(Y-ygal)-siyy',
                 NOM_PARA="Y",
                 rho=rho,
                 gravi=gravi,
                 ygal=ygal,
                 siyy=siyy,)

FSIZZ_TT=FORMULE(VALE='rho*gravi*(Y-ygal)-sizz',
                 NOM_PARA="Y",
                 rho=rho,
                 gravi=gravi,
                 ygal=ygal,
                 sizz=sizz,)

FSIXX_TT=FORMULE(VALE='rho*gravi*(Y-ygal)-sixx',
                 NOM_PARA="Y",
                 rho=rho,
                 gravi=gravi,
                 ygal=ygal,
                 sixx=sixx)

FFCHSIG=CREA_CHAMP(TYPE_CHAM="ELGA_NEUT_F",
                     OPERATION="AFFE",
                     MODELE=MODL,
                     PROL_ZERO="OUI",
                     AFFE=(_F(GROUP_MA=("GrFaceCOx","GrFaceEdz"),
                              NOM_CMP=("X1","X2","X3"),
                              VALE_F=(FSIXX_TT, FSIYY_TT, FSIZZ_TT),),),)

CHXN=CREA_CHAMP(TYPE_CHAM="NOEU_GEOM_R",
                OPERATION="EXTR",
                MAILLAGE=MAILLAGE,
                NOM_CHAM="GEOMETRIE")

CHXG=CREA_CHAMP(TYPE_CHAM="ELGA_GEOM_R",
                OPERATION="DISC",
                MODELE=MODL,
                CHAM_GD=CHXN,)

FCHSIG=CREA_CHAMP(TYPE_CHAM="ELGA_NEUT_R",
                  OPERATION="EVAL",
                  CHAM_F=FFCHSIG,
                  CHAM_PARA=CHXG)

SIN_ARG=CREA_CHAMP(TYPE_CHAM="ELGA_SIEF_R",
                   OPERATION="ASSE",
                   MODELE=MODL,
                   PROL_ZERO="OUI",
                   ASSE=(_F(GROUP_MA=("GrFaceCOx","GrFaceEdz"),
                            CHAM_GD=FCHSIG,
                            NOM_CMP=("X1", "X2", "X3"),
                            NOM_CMP_RESU=("SIXX","SIYY","SIZZ"),),),)

### >>>>>>>>>>>>>>>>>>>
### Boundary conditions
### <<<<<<<<<<<<<<<<<<<

### Prescribed displacement during the first equilibrium
DIMPO_EQ=AFFE_CHAR_MECA(MODELE=MODL,
                        DDL_IMPO=(_F(GROUP_NO=("GrEdgeLeftExc","GrEdgeRight"),
                                     DX=0.,),
                                  _F(GROUP_NO=("GrEdgeBottom","GrEdgeTop"),
                                     DY=0.,),
                                  _F(GROUP_NO=("GrEdgeGal"),
                                     DX=0.,
                                     DY=0.,),),)

### Prescribed displacement during the second equilibrium
DIMP_EX=AFFE_CHAR_MECA(MODELE=MODL,
                       DDL_IMPO=(_F(GROUP_NO=("GrEdgeLeftExc","GrEdgeRight"),
                                    DX=0.,),
                                 _F(GROUP_NO=("GrEdgeBottom","GrEdgeTop"),
                                    DY=0.,),),)

### Gravity for the first equilibrium
PESA=AFFE_CHAR_MECA(MODELE=MODL,
                    PESANTEUR=_F(GROUP_MA=("GrFaceCOx","GrFaceEdz"),
                                 GRAVITE=gravi,
                                 DIRECTION=(0.,-1.,0.),),)

### >>>>>>>>>>
### Time lists
### <<<<<<<<<<

### List for the first equilibrium
INST_EQU=DEFI_LIST_REEL(DEBUT=0.,
                        INTERVALLE=_F(JUSQU_A=1.,
                                      NOMBRE=1),)

INST_EX=DEFI_LIST_REEL(DEBUT=1.,
                       INTERVALLE=_F(JUSQU_A=2.,
                                     NOMBRE=100),)

SUBD_EX=DEFI_LIST_INST(DEFI_LIST=_F(LIST_INST=INST_EX),
                       ECHEC=_F(EVENEMENT='ERREUR',
                                ACTION='DECOUPE',
                                SUBD_METHODE='AUTO',),)

### >>>>>>>>>>>>>>>>>>>>
### Equilibrium solution
### <<<<<<<<<<<<<<<<<<<<

RESU1A=STAT_NON_LINE(MODELE=MODL,
                     CHAM_MATER=AFARG,
                     ETAT_INIT=_F(SIGM=SIN_ARG,
                                  DEPL=DEPL_INI,),
                     INCREMENT=_F(LIST_INST=INST_EQU,),
                     NEWTON=_F(MATRICE='TANGENTE'),
                     CONVERGENCE=_F(ITER_GLOB_MAXI=20,
                                    RESI_GLOB_RELA=1.e-10,),
                     EXCIT=(_F(CHARGE=DIMPO_EQ),
                            _F(CHARGE=PESA),),
                     # COMPORTEMENT=_F(...),
                     SOLVEUR=_F(METHODE="MUMPS"),
                     SUIVI_DDL=(_F(NOM_CHAM="DEPL",
                                   EVAL_CHAM="MIN",
                                   NOM_CMP="DY",
                                   GROUP_NO=("GrFaceEdz"),),
                                _F(NOM_CHAM="DEPL",
                                   EVAL_CHAM="MIN",
                                   NOM_CMP="DX",
                                   GROUP_NO=("GrFaceEdz"),),),)

### >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
### Print the resut at the end of the Equilibrium
### <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
"""
IMPR_RESU(UNITE=80,
          FORMAT='MED',
          RESU=_F(RESULTAT=RESU1A),)
"""
### >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
### Get the fields at the end of the equilibrium
### <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

SIEF0=CREA_CHAMP(OPERATION="EXTR",
                 TYPE_CHAM="ELGA_SIEF_R",
                 RESULTAT=RESU1A,
                 NOM_CHAM="SIEF_ELGA",
                 INST=1.,)

VARI0=CREA_CHAMP(OPERATION="EXTR",
                 TYPE_CHAM="ELGA_VARI_R",
                 RESULTAT=RESU1A,
                 NOM_CHAM="VARI_ELGA",
                 INST=1.,)

### >>>>>>>>>>>>>>>>>>>>>>>
### Compute nodal reactions
### <<<<<<<<<<<<<<<<<<<<<<<

RESU1A=CALC_CHAMP(reuse=RESU1A,
                  RESULTAT=RESU1A,
                  MODELE=MODL,
                  INST=1.,
                  CHAM_MATER=AFARG,
                  FORCE="REAC_NODA",)

REANODA=CREA_CHAMP(OPERATION="EXTR",
                   TYPE_CHAM="NOEU_DEPL_R",
                   RESULTAT=RESU1A,
                   NOM_CHAM="REAC_NODA",
                   INST=1.,)

CHREA=AFFE_CHAR_MECA(MODELE=MODL,
                     VECT_ASSE=REANODA,)

COEF_RN=DEFI_FONCTION(NOM_PARA="INST",
                      VALE=(1.,1.,2.,0.),
                      PROL_DROITE="CONSTANT")

### >>>>>>>>>>>>>>>>>>>>>
### Resolution excavation
### <<<<<<<<<<<<<<<<<<<<<

RESU1=STAT_NON_LINE(MODELE=MODL,
                    CHAM_MATER=AFARG,
                    ETAT_INIT=_F(SIGM=SIEF0,
                                 VARI=VARI0,),
                    INCREMENT=_F(LIST_INST=SUBD_EX),
                    NEWTON=_F(MATRICE="TANGENTE",
                              PREDICTION='EXTRAPOLE',),
                    CONVERGENCE=_F(ITER_GLOB_MAXI=20.,
                  																	RESI_GLOB_RELA=1.e-10,),
                    EXCIT=(_F(CHARGE=DIMP_EX),
                           _F(CHARGE=PESA),
                           _F(CHARGE=CHREA,
                              FONC_MULT=COEF_RN,),),
                    # COMPORTEMENT=_F(...),
                    SOLVEUR=_F(METHODE="MUMPS",),
                    SUIVI_DDL=(_F(NOM_CHAM="DEPL",
                                  EVAL_CHAM="MAX",
                                  NOM_CMP="DY",
                                  GROUP_NO=("GrFaceEdz"),),
                               _F(NOM_CHAM="DEPL",
                                  EVAL_CHAM="MIN",
                                  NOM_CMP="DX",
                                  GROUP_NO=("GrFaceEdz"),),),)

### >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
### Print the resut at the end of the excavation
### <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

TAB_DX=POST_RELEVE_T(ACTION=_F(INTITULE="TAB_DX",
                               OPERATION="EXTREMA",
                               GROUP_NO='GrEdgeGal',
                               RESULTAT=RESU1,
                               NOM_CHAM='DEPL',
                               NOM_CMP='DX',
                               TOUT_ORDRE='OUI',),)

TAB_DY=POST_RELEVE_T(ACTION=_F(INTITULE="TAB_DY",
                               OPERATION="EXTREMA",
                               GROUP_NO='GrEdgeGal',
                               RESULTAT=RESU1,
                               NOM_CHAM='DEPL',
                               NOM_CMP='DY',
                               TOUT_ORDRE='OUI',),)

IMPR_TABLE(FORMAT='TABLEAU',
           SEPARATEUR=',',
           TABLE=TAB_DX,
           UNITE=8,)

IMPR_TABLE(FORMAT='TABLEAU',
           SEPARATEUR=',',
           TABLE=TAB_DY,
           UNITE=9,)

IMPR_RESU(UNITE=81,
          FORMAT='MED',
          RESU=(_F(RESULTAT=RESU1,
                   TOUT="OUI",
                   NOM_CHAM="VARI_ELGA",
                   IMPR_NOM_VARI='NON',
                   INST=(1.,2.),
                   NOM_CMP=("V5","V6","V7","V8","V9","V10"),       # MCBigoniMini and MCBigoniMiniIH
                   # NOM_CMP=("V5","V6","V7","V8","V9","V10","V11"), # MCBigoniMiniFull
                   ),
                _F(RESULTAT=RESU1,
                   TOUT="OUI",
                   NOM_CHAM="DEPL",
                   IMPR_NOM_VARI='NON',
                   INST=(1.,2.),
                   NOM_CMP=("DX","DY"),),
                _F(RESULTAT=RESU1,
                   TOUT="OUI",
                   NOM_CHAM="SIEF_ELGA",
                   IMPR_NOM_VARI='NON',
                   INST=(1.,2.),
                   NOM_CMP=("SIXX","SIYY","SIZZ","SIXY"),),),)

FIN()
