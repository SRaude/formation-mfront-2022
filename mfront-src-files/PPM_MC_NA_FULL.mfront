// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// Perfectly-plastic (non-associated plastic flow) model based on:
//    * http://tfel.sourceforge.net/MohrCoulomb.html
//    * https://doi.org/10.1016/j.compstruc.2016.11.010
//    * https://doi.org/10.1016/0045-7949(94)00339-5
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

@DSL Implicit;
@Author Simon Raude;
@Date 15/09/2022;
@Behaviour PPM_MC_NA_FULL;

@Algorithm NewtonRaphson;
// @Algorithm NewtonRaphson_NumericalJacobian;
// @CompareToNumericalJacobian true;
// @PerturbationValueForNumericalJacobianComputation 1.e-8;

@Theta 1.; 
@Epsilon 1.e-14;

// >>>>>>>>>>>>>>>>>>>>>
// 1. Material Constants
// <<<<<<<<<<<<<<<<<<<<<

// Young modulus (>0, Pa)
@MaterialProperty stress young;
young.setGlossaryName("YoungModulus");

// Poisson ratio (-1<..<0.5, -)
@MaterialProperty real nu;
nu.setGlossaryName("PoissonRatio");

// Friction angle (>0, °)
@MaterialProperty real phi;
phi.setEntryName("FrictionAngle");

// Dilation angle (>0, °)
@MaterialProperty real psi;
psi.setEntryName("DilationAngle");

// Cohesion (>=0, Pa)
@MaterialProperty stress coh;
coh.setEntryName("Cohesion");

// Controls the intersection of the hyperbolic branch of the plastic criterion with the I1 axis (0<..<=C/tan(phi), Pa)
@MaterialProperty real at;
at.setEntryName("TensionCutOff");

// Controls the shapes of the plastic criterion and the plastic flow function in the pi plane (0<=..<1, -)
@MaterialProperty real gam;
gam.setEntryName("PiShapeCoef");

// >>>>>>>>>>>>>>>>>>
// 2. Local Variables
// <<<<<<<<<<<<<<<<<<

@LocalVariable bool b;
@LocalVariable real local_zero_tolerance; // Local zero tolerance
@LocalVariable real pi;                   // Real pi=3.14....
@LocalVariable real phir;                 // Friction angle in radians
@LocalVariable real psir;                 // Dilation angle in radians
@LocalVariable real thetaFm;              // Plastic criterion: Lode angle for which the radius of the MC criterion is the minimum
@LocalVariable real thetaGm;              // Plastic flow function: Lode angle for which the radius of the MC flow function is the minimum
@LocalVariable real rF;
@LocalVariable real rG;
@LocalVariable real betaF;
@LocalVariable real betaG;
@LocalVariable real KFm;                  // Value of the function KF(theta) for Theta=thetaFm
@LocalVariable real KGm;                  // Value of the function KG(theta) for Theta=thetaGm
@LocalVariable stress aG;                 // at*tan(phi)/tan(psi) (in the plastic flow function)
@LocalVariable Stensor4 Ce;               // Elastic stiffness tensor
@LocalVariable stress lambda;             // First Lame modulus
@LocalVariable stress mu;                 // Shear modulus
@LocalVariable stress ks;                 // Bulk modulus

// >>>>>>>>>>>>>>>>>
// 3. State Variable
// <<<<<<<<<<<<<<<<<

@StateVariable real lam; // Plastic multiplier
lam.setEntryName("PlastMultiplier");

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// 4. Auxilliary state variables
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<

@AuxiliaryStateVariable real niter;  // Number of Newton iterations
@AuxiliaryStateVariable real ip;     // Plastic index
@AuxiliaryStateVariable strain evp;  // Volumetric plastic strain
@AuxiliaryStateVariable real inst;   // Time...
@AuxiliaryStateVariable real lode;   // Lode angle

niter.setEntryName("LocalNewtonIter");
ip.setEntryName("PlasticIndex");
evp.setEntryName("PVolumStrain");
inst.setEntryName("Time");
lode.setEntryName("LodeAngle");

// >>>>>>>>>>>>>>>>>>>>>>>>
// 5. Init. local variables
// <<<<<<<<<<<<<<<<<<<<<<<<

@Includes{
	#include"TFEL/Material/Lame.hxx"
}

@InitLocalVariables{
	using namespace tfel::material::lame;
	local_zero_tolerance=real(1e-12);
	pi=4.*atan(1.);
	// >>> FrictionAngle and DilationAngle in radian
	phir=phi*pi/180.;
	psir=psi*pi/180.;
	// >>> Some quantities to define KF and FG
	thetaFm=atan(-sin(phir)/sqrt(3.));
	thetaGm=atan(-sin(psir)/sqrt(3.));
	rF=(3.-sin(phir))/(3.+sin(phir));
	rG=(3.-sin(psir))/(3.+sin(psir));
	betaF=6./pi*atan((2.*rF-1.)/sqrt(3.));
	betaG=6./pi*atan((2.*rG-1.)/sqrt(3.));
    KFm=(cos(thetaFm)-sin(phir)*sin(thetaFm)/sqrt(3.))/cos(betaF*pi/6.-acos(gam*cos(3.*(thetaFm+pi/6.)))/3.);
    KGm=(cos(thetaGm)-sin(psir)*sin(thetaGm)/sqrt(3.))/cos(betaG*pi/6.-acos(gam*cos(3.*(thetaGm+pi/6.)))/3.);
    // >>> TensionCutOff Parameters for the plastic flow function
    aG=at*tan(phir)/tan(psir);
	// >>> Elastic moduli and Hook tensor
	lambda=computeLambda(young,nu);
	mu=computeMu(young,nu);
	ks=lambda+2.*mu/3.;
	Ce=3.*ks*Stensor4::J()+2.*mu*Stensor4::K();
	// >>> Initialise elastic strain (for cases with initial stresses without displacements, e.g. tunnels)
	if (inst==real(0) && lam==real(0)) {
        const Stensor4 Se=invert(Ce);
        eel=(Se*sig);
    }
}

// >>>>>>>>>>>>>>>>>>>>>
// 6. Elastic Prediction
// <<<<<<<<<<<<<<<<<<<<<

@Predictor{
	
	// >>> 6.1 Compute the elastic trial stress
	StressStensor sigel(lambda*trace(eel+deto)*Stensor::Id()+2.*mu*(eel+deto));

	// >>> 6.2 Compute the invariants of sigel
	const StressStensor sdel=deviator(sigel);
	const stress J2el=.5*(sdel|sdel);
	const stress I1el=trace(sigel);
	const stress J3el=det(sdel);
	const real C3Tel=min(max(.5*J3el*pow(3./max(J2el,local_zero_tolerance),1.5),-1.),1.);

	// >>> 6.3 Compute KF(theta)
	const real KFel=KFm*cos(betaF*pi/6.-acos(gam*C3Tel)/3.);

	// >>> 6.4 Plastic MC criterion - condition for plasticity
	const stress RFel=sqrt(J2el*KFel*KFel+at*at*sin(phir)*sin(phir));
	b=RFel+I1el*sin(phir)/3.-coh*cos(phir)>real(0);

}

// >>>>>>>>>>>>>>>>>>>>>>>>>>>
// 7. Update the stress tensor
// <<<<<<<<<<<<<<<<<<<<<<<<<<<

@ComputeStress{
	sig=lambda*trace(eel)*StrainStensor::Id()+2.*mu*eel;
}

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>
// 8. Plastic-Damage correction
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<

@Integrator{

	// >>> 8.1 Integration if plastic loading
	if (b){

		// >>>>>> 8.1.1 Compute the invariants of sig
		const StressStensor sd=deviator(sig);
		const stress J2=.5*(sd|sd);
		const stress I1=trace(sig);
		const stress J3=det(sd);
		const real C3T=min(max(.5*J3*pow(3./max(J2,local_zero_tolerance),1.5),-1.),1.);
		
		// >>>>>> 8.1.2 Compute K(theta) for the plastic criterion and the plastic flow function
		const real KF=KFm*cos(betaF*pi/6.-acos(gam*C3T)/3.);
		const real KG=KGm*cos(betaG*pi/6.-acos(gam*C3T)/3.);
		
		// >>>>>> 8.1.3 Compute the plastic criterion
		const stress RF=sqrt(J2*KF*KF+at*at*sin(phir)*sin(phir));
		const stress F=RF+I1*sin(phir)/3.-coh*cos(phir);

		// >>>>>> 8.1.4 Compute the plastic flow direction
		const stress RG=sqrt(J2*KG*KG+aG*aG*sin(psir)*sin(psir));
		// >>>>>>>>> Compute dC3T_dJ2 and dC3T_dJ3
		const real dC3T_dJ2=-2.25*sqrt(3.)*J3*pow(max(J2,local_zero_tolerance),-2.5);
		const real dC3T_dJ3=1.5*sqrt(3.)*pow(max(J2,local_zero_tolerance),-1.5);
		// >>>>>>>>> Compute dKG_dJ2 and dKG_dJ3
		const real dKG_dC3T=-KGm*gam*sin(betaG*pi/6.-acos(gam*C3T)/3.)/3./max(sqrt(1.-gam*gam*C3T*C3T),local_zero_tolerance);
		const real dKG_dJ2=dKG_dC3T*dC3T_dJ2;
		const real dKG_dJ3=dKG_dC3T*dC3T_dJ3;
		// >>>>>>>>> Compute dG_dI1, dG_dJ2, dG_dJ3
		const real dG_dI1=sin(psir)/3.;
		const real dG_dJ2=.5*KG*(KG+2.*J2*dKG_dJ2)/max(RG,local_zero_tolerance);
		const stress dG_dJ3=J2*KG*dKG_dJ3/max(RG,local_zero_tolerance);
		// >>>>>>>>> Compute dI1_dsig, dJ2_dsig, dJ3_dsig
		const Stensor dI1_dsig=Stensor::Id();
		const Stensor dJ2_dsig=sd;
		const Stensor dJ3_dsig=computeJ3Derivative(sig);
		// >>>>>>>>> Compute nG=dG_dsig
		const Stensor nG=(dG_dI1*dI1_dsig)+(dG_dJ2*dJ2_dsig)+(dG_dJ3*dJ3_dsig);

		// >>>>>> 8.1.4 Equations to be solvedKGm
		feel=deel-deto+dlam*nG;
		flam=F/young;
		
		// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Comment this block if "@Algorithm NewtonRaphson_NumericalJacobian" >>>>>>>>>>>>>>>>
		
		// >>>>>> 8.1.5 Jacobian

		// >>>>>>>>> 8.1.5.1 Some tools
		// >>>>>>>>>>>> Compute dnG_dsig
		const real dC3T_ddJ2=5.625*sqrt(3.)*J3*pow(max(J2,local_zero_tolerance),-3.5);
		const real dC3T_ddJ3=real(0);
		const real dC3T_dJ3dJ2=-2.25*sqrt(3.)*pow(max(J2,local_zero_tolerance),-2.5);
		const real dC3T_dJ2dJ3=dC3T_dJ3dJ2;
		// >>>>>>>>>>>>>>>
		const real dKG_ddC3T_1=-gam*gam*gam*C3T*sin(betaG*pi/6.-acos(gam*C3T)/3.)/3./pow(max(1.-gam*gam*C3T*C3T,local_zero_tolerance),1.5);
		const real dKG_ddC3T_2=-gam*gam*cos(betaG*pi/6.-acos(gam*C3T)/3.)/9./max(1.-gam*gam*C3T*C3T,local_zero_tolerance);
		const real dKG_ddC3T=KGm*(dKG_ddC3T_1+dKG_ddC3T_2);
		const real dKG_dJ2dC3T=dKG_ddC3T*dC3T_dJ2;
		const real dKG_ddJ2=dKG_dJ2dC3T*dC3T_dJ2+dKG_dC3T*dC3T_ddJ2;
		const real dKG_ddJ3=dKG_ddC3T*dC3T_dJ3*dC3T_dJ3+dKG_dC3T*dC3T_ddJ3;
		const real dKG_dJ3dJ2=dKG_ddC3T*dC3T_dJ3*dC3T_dJ2+dKG_dC3T*dC3T_dJ3dJ2;
		const real dKG_dJ2dJ3=dKG_ddC3T*dC3T_dJ2*dC3T_dJ3+dKG_dC3T*dC3T_dJ2dJ3;
		// >>>>>>>>>>>>>>>
		const real dG_ddJ2=((2.*KG+J2*dKG_dJ2)*dKG_dJ2+KG*J2*dKG_ddJ2-dG_dJ2*dG_dJ2)/max(RG,local_zero_tolerance);
		const real dG_ddJ3=(J2*(dKG_dJ3*dKG_dJ3+KG*dKG_ddJ3)-dG_dJ3*dG_dJ3)/max(RG,local_zero_tolerance);
		const real dG_dJ3dJ2=(KG*dKG_dJ3+J2*dKG_dJ2*dKG_dJ3+J2*KG*dKG_dJ3dJ2-dG_dJ2*dG_dJ3)/max(RG,local_zero_tolerance);
		const real dG_dJ2dJ3=(dKG_dJ3*(KG+J2*dKG_dJ2)+J2*KG*dKG_dJ2dJ3-dG_dJ2*dG_dJ3)/max(RG,local_zero_tolerance);
		// >>>>>>>>>>>>>>>
		const Stensor4 dJ2_ddsig=Stensor4::K();
		const Stensor4 dJ3_ddsig=computeJ3SecondDerivative(sig);
		// >>>>>>>>>>>>>>>
		const Stensor4 dnG_dsig=((dG_ddJ2*dJ2_dsig+dG_dJ3dJ2*dJ3_dsig)^dJ2_dsig)+(dG_dJ2*dJ2_ddsig)+((dG_dJ2dJ3*dJ2_dsig+dG_ddJ3*dJ3_dsig)^dJ3_dsig)+(dG_dJ3*dJ3_ddsig);
		// >>>>>>>>>>>> Compute dF_dsig
		const real dKF_dC3T=-KFm*gam*sin(betaF*pi/6.-acos(gam*C3T)/3.)/3./max(sqrt(1.-gam*gam*C3T*C3T),local_zero_tolerance);
		const real dKF_dJ2=dKF_dC3T*dC3T_dJ2;
		const real dKF_dJ3=dKF_dC3T*dC3T_dJ3;
		// >>>>>>>>>>>>>>>
		const real dF_dI1=sin(phir)/3.;
		const real dF_dJ2=.5*KF*(KF+2.*J2*dKF_dJ2)/max(RF,local_zero_tolerance);
		const stress dF_dJ3=J2*KF*dKF_dJ3/max(RF,local_zero_tolerance);
		// >>>>>>>>>>>>>>>
		const Stensor dF_dsig=(dF_dI1*dI1_dsig)+(dF_dJ2*dJ2_dsig)+(dF_dJ3*dJ3_dsig);
		
		// >>>>>>>>> 8.1.5.2 First line
		dfeel_ddeel=Stensor4::Id()+dlam*(dnG_dsig*Ce);
		dfeel_ddlam=nG;
		
		// >>>>>>>>> 8.1.5.3 Third line
		dflam_ddeel=(dF_dsig|Ce)/young;
		dflam_ddlam=real(0);
		
		// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
		
	}

	// >>> 8.2 Elasticity
	else {

		feel=deel-deto;
		flam=dlam;

	}
}

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// 9. Update Auxilliary State Variables
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

@UpdateAuxiliaryStateVariables{
	const StressStensor sd=deviator(sig);
	const stress J2=.5*(sd|sd);
	const stress J3=det(sd);
	const real C3T=min(max(.5*J3*pow(3./max(J2,local_zero_tolerance),1.5),-1.),1.);
	lode=acos(C3T)/3.*180./pi;
	inst+=dt;
	niter=iter;
	if (dlam>0) {
		ip=1;
		evp+=dlam*sin(psir);
	} else {
		ip=0;
	}

}

// >>>>>>>>>>>>>>>>>>>>
// 10. Tangent Operator
// <<<<<<<<<<<<<<<<<<<<

@TangentOperator{
	if((smt==ELASTIC)||(smt==SECANTOPERATOR)) {
		computeElasticStiffness<N,Type>::exe(Dt,lambda,mu);
	}
	else if (smt==CONSISTENTTANGENTOPERATOR) {
		Stensor4 Je;
		getPartialJacobianInvert(Je);
		Dt=Ce*Je;
	} 
	else {
		return false;
	}
}
